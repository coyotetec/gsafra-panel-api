generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id         String  @id @default(uuid())
  name       String
  host       String
  externalId String  @map("external_id")
  active     Boolean @default(true)

  userCompany         UserCompany[]
  notificationCompany NotificationCompany[]

  @@map("company")
}

enum RoleType {
  MANAGER
  ADMIN
  USER
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String?
  role       RoleType
  externalId Int      @map("external_id")
  active     Boolean  @default(true)

  userCompany UserCompany[]
  resetToken  ResetToken?

  @@map("user")
}

model UserCompany {
  id        String @id @default(uuid())
  userId    String @map("user_id")
  companyId String @map("company_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("user_company")
}

model Notification {
  id           String   @id @default(uuid())
  title        String
  body         String   @db.Text
  allCompanies Boolean  @default(true) @map("all_companies")
  createdAt    DateTime @default(now()) @map("created_at")

  notificationCompany NotificationCompany[]

  @@map("notification")
}

model NotificationCompany {
  id             String @id @default(uuid())
  notificationId String @map("notification_id")
  companyId      String @map("company_id")

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("notification_company")
}

model ResetToken {
  id        String   @id @default(uuid())
  token     String
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("reset_token")
}
